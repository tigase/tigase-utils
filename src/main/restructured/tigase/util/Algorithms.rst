.. java:import:: javax.crypto Mac

.. java:import:: javax.crypto.spec SecretKeySpec

.. java:import:: java.nio.charset Charset

.. java:import:: java.security MessageDigest

.. java:import:: java.security NoSuchAlgorithmException

Algorithms
==========

.. java:package:: tigase.util
   :noindex:

.. java:type:: public class Algorithms

   Describe class Algorithms here. Created: Wed May 4 13:24:03 2005

   :author: \ `Artur Hefczyc <mailto:artur.hefczyc@tigase.org>`_\

Methods
-------
$main
^^^^^

.. java:method:: public static void $main(String[] args) throws Exception
   :outertype: Algorithms

   Describe \ ``main``\  method here.

   :param args: a \ ``String[]``\  value

bytesToHex
^^^^^^^^^^

.. java:method:: public static final String bytesToHex(byte[] buff)
   :outertype: Algorithms

digest
^^^^^^

.. java:method:: public static final byte[] digest(String id, String secret, String alg) throws NoSuchAlgorithmException
   :outertype: Algorithms

generateDialbackKey
^^^^^^^^^^^^^^^^^^^

.. java:method:: public static String generateDialbackKey(String originatingServer, String receivingServer, String secret, String streamID)
   :outertype: Algorithms

   Calculates dialback key as decribed in \ `XEP-0185 <http://xmpp.org/extensions/xep-0185.html>`_\  version 1.0.   Implemented algorithm (recomended in XEP-0185):

   .. parsed-literal::

      key = HMAC-SHA256
            (
              SHA256(Secret),
              {
                Receiving Server, ' ',
                Originating Server, ' ',
                Stream ID
              }
            )

   :param originatingServer: the hostname of the Originating Server
   :param receivingServer: the hostname of the Receiving Server
   :param secret: a secret known by the Authoritative Server's network
   :param streamID: the Stream ID generated by the Receiving Server
   :return: string contains HEX encoded dialback key.

hexDigest
^^^^^^^^^

.. java:method:: public static final String hexDigest(String id, String secret, String alg) throws NoSuchAlgorithmException
   :outertype: Algorithms

   This method encodes data using digest algorithm described in \ *JEP-0078*\  documentation. As a result you have \ ``String``\  containing digest data which can be compared with data sent by the user to authenticate him.

   :param id: a \ ``String``\  value of some ID value like session ID to concatenate with secret word.
   :param secret: a \ ``String``\  value of a secret word shared between entites.
   :param alg: a \ ``String``\  value of algorithm name to use for generating diffest message.
   :throws NoSuchAlgorithmException: if an error occurs during encoding digest message.
   :return: a \ ``String``\  value digest message as defined.

sha256
^^^^^^

.. java:method:: public static String sha256(String data)
   :outertype: Algorithms

   Calculates SHA-256 hash of given data.

   :param data: data to hash
   :return: string contains HEX encoded SHA-256 of data.

